// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using VehicleAPI.Infrastructure.Persistence;

#nullable disable

namespace VehicleAPI.Migrations
{
    [DbContext(typeof(VehicleContext))]
    [Migration("20230304230357_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "uuid-ossp");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("VehicleAPI.Core.Domain.Entities.Vehicle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid")
                        .HasColumnName("customer_id");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("customer_name");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_on");

                    b.Property<DateTime?>("LastPing")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_ping");

                    b.Property<string>("RegNr")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("reg_nr");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_on");

                    b.Property<string>("VIN")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("vin");

                    b.Property<short>("VehicleStatusId")
                        .HasColumnType("smallint")
                        .HasColumnName("vehicle_status_id");

                    b.HasKey("Id")
                        .HasName("pk_vehicle");

                    b.HasIndex("VehicleStatusId")
                        .HasDatabaseName("ix_vehicle_vehicle_status_id");

                    b.ToTable("vehicle", (string)null);
                });

            modelBuilder.Entity("VehicleAPI.Core.Domain.Entities.VehicleStatus", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<short>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_vehicle_statues");

                    b.ToTable("vehicle_statues", (string)null);
                });

            modelBuilder.Entity("VehicleAPI.Core.Domain.Entities.Vehicle", b =>
                {
                    b.HasOne("VehicleAPI.Core.Domain.Entities.VehicleStatus", "VehicleStatus")
                        .WithMany()
                        .HasForeignKey("VehicleStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_vehicle_vehicle_statues_vehicle_status_id");

                    b.Navigation("VehicleStatus");
                });
#pragma warning restore 612, 618
        }
    }
}
